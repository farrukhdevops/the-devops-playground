version: "3.9"

services:
  pg:
    image: postgres:16
    container_name: pg
    environment:
      POSTGRES_PASSWORD: postgres
    volumes:
      - pg-data:/var/lib/postgresql/data
    ports: ["5432:5432"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U postgres || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports: ["5672:5672","15672:15672"]
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: prometheus
    command: ["--config.file=/etc/prometheus/prometheus.yml","--storage.tsdb.retention.time=15d"]
    volumes:
      - ./observability/prometheus/:/etc/prometheus/:ro
    ports: ["9090:9090"]
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.8
    container_name: loki
    command: -config.file=/etc/loki/config.yml
    volumes:
      - loki-data:/loki
      - ./observability/loki/config.yml:/etc/loki/config.yml:ro
    ports: ["3100:3100"]
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.8
    container_name: promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./observability/promtail/config.yml:/etc/promtail/config.yml:ro
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.2.0
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: devopsplayground
      GF_METRICS_ENABLED: "true"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    ports: ["3000:3000"]
    restart: unless-stopped
    depends_on:
      prometheus: { condition: service_started }
      loki:       { condition: service_started }

  node-exporter:
    image: prom/node-exporter:v1.8.2
    container_name: node-exporter
    pid: host
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor
    ports: ["8080:8080"]
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped

  # TODO: add your app services here (catalog-api, orders-api, payments-api, storefront, workers),
  # each with a container_name, healthcheck, and restart policy.

volumes:
  pg-data:
  loki-data:
  grafana-data:
  catalog-api:
    image: ghcr.io/yourorg/catalog-api:latest
    container_name: catalog-api
    environment:
      DATABASE_URL: postgres://postgres:postgres@pg:5432/postgres?sslmode=disable
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      LOG_LEVEL: info
    depends_on:
      pg: { condition: service_started }
      rabbitmq: { condition: service_healthy }
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:7001/health || exit 1"]
      interval: 10s
      timeout: 2s
      retries: 10
    restart: unless-stopped
  orders-api:
    image: ghcr.io/yourorg/orders-api:latest
    container_name: orders-api
    environment:
      DATABASE_URL: postgres://postgres:postgres@pg:5432/postgres?sslmode=disable
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      LOG_LEVEL: info
    depends_on:
      pg: { condition: service_started }
      rabbitmq: { condition: service_healthy }
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:7002/health || exit 1"]
      interval: 10s
      timeout: 2s
      retries: 10
    restart: unless-stopped
  payments-api:
    image: ghcr.io/yourorg/payments-api:latest
    container_name: payments-api
    environment:
      DATABASE_URL: postgres://postgres:postgres@pg:5432/postgres?sslmode=disable
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      LOG_LEVEL: info
    depends_on:
      pg: { condition: service_started }
      rabbitmq: { condition: service_healthy }
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:7003/health || exit 1"]
      interval: 10s
      timeout: 2s
      retries: 10
    restart: unless-stopped
  inventory-worker:
    image: ghcr.io/yourorg/inventory-worker:latest
    container_name: inventory-worker
    environment:
      DATABASE_URL: postgres://postgres:postgres@pg:5432/postgres?sslmode=disable
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      LOG_LEVEL: info
    depends_on:
      pg: { condition: service_started }
      rabbitmq: { condition: service_healthy }
    restart: unless-stopped
  tdp-frontend:
    image: ghcr.io/yourorg/tdp-frontend:latest
    container_name: tdp-frontend
    environment:
      VITE_CATALOG_API_URL:  http://localhost:7001
      VITE_ORDERS_API_URL:   http://localhost:7002
      VITE_PAYMENTS_API_URL: http://localhost:7003
    depends_on:
      catalog-api:  { condition: service_healthy }
      orders-api:   { condition: service_healthy }
      payments-api: { condition: service_healthy }
    restart: unless-stopped
